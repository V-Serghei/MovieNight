    @using MovieNight.Domain.enams
    @using MovieNight.Web.Infrastructure
    @model MovieNight.Web.Models.Movie.MovieTemplateInfModel

    @{
    ViewBag.Title = "RandomFilm";
    }
    <style>
        #loadingIndicator {
            z-index: 9999;
            background-color: rgba(255, 255, 255, 0.8);
            padding: 20px;
            border-radius: 5px;
        }
    </style>

    <div>
        <div class="content">
            <!-- Start Content-->
            <div class="container-fluid">
                <div id="formWrapper">
                    @using (Ajax.BeginForm("GenRandomMovie", "SearchSortAdd", new AjaxOptions
                            {
                                HttpMethod = "POST",
                                UpdateTargetId = "tableContainer",
                                OnSuccess = "handleSuccess",
                                OnFailure = "handleFailure",
                                LoadingElementId = "loadingIndicator",
                                OnBegin = "showLoadingIndicator"
                            }))
                    {
                        <!-- start page title -->
                        <div class="row">
                            <div class="col-12">
                                <div class="page-title-box">
                                    <div class="page-title-right">
                                        <ol class="breadcrumb m-0">
                                            <li class="breadcrumb-item"><a href="javascript: void(0);">MovieNight</a></li>
                                            <li class="breadcrumb-item" id="movieTitle1" name="Category" value="1"><a href="javascript: void(0);">@Model.Title</a></li>
                                            <input type="hidden" name="Category" value="4"/>
                                        </ol>
                                    </div>
                                    <h4 class="page-title" id="movieTitle2">@Model.Title</h4>
                                </div>
                            </div>
                        </div>
                        <!-- end page title -->

                        <!-- end row -->
                    <div id="filminf">
                        <div class="row justify-content-center mt-4" >
                            <div class="col-lg-4">
                                <div class="text-center card-box ribbon-box">
                                    <div class="ribbon-two ribbon-two-success"><span></span></div>
                                    <div class="clearfix"></div>
                                    <div class="pt-2 pb-2">
                                        <img id="posterImage" src="@Url.Content(Model.PosterImage)" class="fa-times-rectangle img-thumbnail" alt="movie-poster">
                                        <h4 id="movieTitle" class="mt-3 font-17"><a href="@Url.Action("MovieTemplatePage", "InformationSynchronization", new { id = Model.Id })" class="text-dark">@Model.Title</a></h4>

                                        <p id="productionYear" class="text-muted">Production Year: @Model.ProductionYear.ToString("dd/MM/yyyy")</p>
                                        <p id="movieGrade" class="text-muted">Grade: @Model.MovieNightGrade</p>
                                        <div id="genres">
                                            @foreach (var gen in Model.Genre)
                                            {
                                                <span class="text-bg-dark mb-1 font-12 ml-2">@gen</span>
                                            }
                                        </div>
                                        <br>

                                        @if (HttpContext.Current.GetBookmarkTimeOf() != null)
                                        {
                                            if (!Model.Bookmark)
                                            {
                                                <button id="bookmarkButton" type="button" class="btn btn-primary btn-sm waves-effect waves-light" onclick="toggleBookmark('@Model.Id', true)">
                                                    <i class="mdi mdi-bookmark-plus mr-1"></i> Bookmark
                                                </button>
                                            }
                                            else
                                            {
                                                <button id="bookmarkButton" type="button" class="btn btn-danger btn-sm waves-effect waves-light" onclick="toggleBookmark('@Model.Id', false)">
                                                    <i class="mdi mdi-bookmark-plus mr-1"></i> Delete Bookmark
                                                </button>
                                            }

                                            if (!Model.BookmarkTomeOf)
                                            {
                                                <button id="bookmarkTimeOfButton" type="button" class="btn btn-primary btn-sm waves-effect waves-light" onclick="toggleBookmarkTimeOf('@Model.Id', true)">
                                                    <i class="mdi mdi-bookmark-plus mr-1"></i> Maybe I’ll watch!
                                                </button>
                                            }
                                            else
                                            {
                                                <button id="bookmarkTimeOfButton" type="button" class="btn btn-danger btn-sm waves-effect waves-light" onclick="toggleBookmarkTimeOf('@Model.Id', false)">
                                                    <i class=" remixicon-bookmark-3-line"></i> Cancel
                                                </button>
                                            }
                                        }
                                        <a href="@Url.Action("MoviePlayer", "InformationSynchronization", new { movieId = Model.Id })" class="btn btn-light btn-sm waves-effect"><i class="mdi mdi-movie mr-1"></i> Watch</a>
                                    </div> <!-- end .padding -->
                                </div> <!-- end card-box-->
                            </div>
                        </div>
                    </div>
                        
                        <div id="loadingIndicator" class="row justify-content-center mt-4" style="display: none;">
                            <div class="text-center">
                                <div class="spinner-border avatar-lg text-primary" role="status"></div>
                                <br> <!-- Добавляем перенос строки -->
                                <p class="text-primary m-2">Loading...</p>
                            </div>
                        </div>


                        <div class="row justify-content-center mt-4">
                            <div class="col-lg-4 text-center">
                                <button id="RandomFilm" type="submit" onclick="showLoadingIndicator()" class="btn btn-primary btn-lg">Random Film</button>
                            </div>
                        </div>
                    }
                </div>
            </div>
            <!-- container -->
        </div> <!-- content -->
    </div>

    <script>

        function showLoadingIndicator() {
            document.getElementById("loadingIndicator").style.display = "block";
            document.getElementById("filminf").style.display = "none"; 
        }
        
        
        function handleSuccess(data) {


            document.getElementById("posterImage").src = data.posterImage;

            document.getElementById("movieTitle").innerText = data.title;
            document.getElementById("movieTitle1").innerText = data.title;
            document.getElementById("movieTitle2").innerText = data.title;

            document.getElementById("productionYear").innerText = "Production Year: " + data.productionYear;
            document.getElementById("movieGrade").innerText = "Grade: " + data.movieGrade;

            var genresDiv = document.getElementById("genres");
            genresDiv.innerHTML = "";
            data.genre.forEach(function(gen) {
                var span = document.createElement("span");
                span.className = "text-bg-dark mb-1 font-12 ml-2";
                span.innerText = gen;
                genresDiv.appendChild(span);
            });

            var bookmarkButton = document.getElementById("bookmarkButton");
            var bookmarkTimeOfButton = document.getElementById("bookmarkTimeOfButton");

            if (data.bookmarked.bool) {
                bookmarkButton.classList.remove("btn-primary");
                bookmarkButton.classList.add("btn-danger");
                bookmarkButton.innerText = "Delete Bookmark";
            } else {
                bookmarkButton.classList.remove("btn-danger");
                bookmarkButton.classList.add("btn-primary");
                bookmarkButton.innerText = "Bookmark";
            }

            if (data.bookmarkTimeOf.bool) {
                bookmarkTimeOfButton.classList.remove("btn-primary");
                bookmarkTimeOfButton.classList.add("btn-danger");
                bookmarkTimeOfButton.innerText = "Cancel";
            } else {
                bookmarkTimeOfButton.classList.remove("btn-danger");
                bookmarkTimeOfButton.classList.add("btn-primary");
                bookmarkTimeOfButton.innerText = "Maybe I’ll watch!";
            }

            document.getElementById("loadingIndicator").style.display = "none";
            document.getElementById("filminf").style.display = "block";
        }


        function handleFailure() {
            console.error("Error occurred while processing the request.");
        }

        function toggleBookmark(movieId, isAddBookmark) {
            var url = isAddBookmark ? '/InformationSynchronization/BookmarkMovie' : '/InformationSynchronization/DeleteBookmarkMovie';
            var button = event.target;

            fetch(url, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({ movieId: movieId }),
            })
                .then(response => response.json())
                .then(data => {
                    location.reload();
                })
                .catch(error => {
                    console.error('Error:', error);
                });
        }

        function toggleBookmarkTimeOf(movieId, isAddBookmark) {
            var url = isAddBookmark ? '/InformationSynchronization/AddToBookmarkTimeOf' : '/InformationSynchronization/DeleteBookmarkTimeOf';
            var button = event.target;

            fetch(url, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({ movieId: movieId }),
            })
                .then(response => response.json())
                .then(data => {
                    location.reload();
                })
                .catch(error => {
                    console.error('Error:', error);
                });
        }

    </script>
