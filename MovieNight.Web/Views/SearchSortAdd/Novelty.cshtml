@using MovieNight.Domain.enams
@using MovieNight.Web.Infrastructure
@using SortDirection = MovieNight.Domain.enams.SortDirection
@model MovieNight.Web.Models.Movie.SearchPages.MovieListModel

@{
ViewBag.Title = "Novelty";

}

<div>
    <div class="content">

        <!-- Start Content-->

        <div class="container-fluid">

            @using (Html.BeginForm("SortCurrFilm", "SearchSortAdd", FormMethod.Post, new { enctype = "multipart/form-data", id = "sortForm" }))
            {
            <!-- start page title -->
            <div class="row">
                <div class="col-12">
                    <div class="page-title-box">
                        <div class="page-title-right">
                            <ol class="breadcrumb m-0">
                                <li class="breadcrumb-item"><a href="javascript: void(0);">MovieNight</a></li>
                                <li class="breadcrumb-item" name="Direction" value="4"><a href="javascript: void(0);">Novelty</a></li>
                                <input type="hidden" name="Direction" value="5"/>
                            </ol>
                        </div>
                        <h4 class="page-title">Novelty</h4>
                    </div>
                </div>
            </div>
            <!-- end page title -->

            <div class="row">
                <div class="col-12">
                    <div class="card-box">
                        <div class="row">
                            <div class="col-lg-8">
                                <!-- Removed the inner form here -->
                                <div class="form-inline">
                                    <div class="form-group mx-sm-3">
                                        <input type="hidden" name="SortPar" value="1"/>
                                        <h3 class="display-4 text-primary font-weight-bold">What happened just recently</h3>
                                    </div>

                                    <div class="form-group">
                                        <input type="hidden" id="sortDirection" name="SortingDirection" value="2"/>
                                    </div>
                                </div>
                            </div>
                            <div class="col-lg-4">
                                <div class="text-lg-right mt-3 mt-lg-0">
                                    <a href="#custom-modal" class="btn btn-danger waves-effect waves-light" data-animation="fadein" data-plugin="custommodal" data-overlayColor="#38414a"><i class="mdi mdi-plus-circle mr-1"></i> Add New</a>
                                </div>
                            </div><!-- end col-->
                        </div> <!-- end row -->
                    </div> <!-- end card-box -->
                </div><!-- end col-->
            </div>
            <!-- end row -->

            for (var index = 0; index < Model.ListFilm.Count + 3; index += 3)
            {
            <div class="row">

                @for (var currIndex = 0; currIndex < 3; currIndex++)
                {
                if (currIndex + index < Model.ListFilm.Count)
                {
                <div class="col-lg-4">
                    <div class="text-center card-box ribbon-box">
                        <div class="ribbon-two ribbon-two-success"><span></span></div>
                        <div class="clearfix"></div>
                        <div class="pt-2 pb-2">
                            <img src="@Url.Content(Model.ListFilm[index + currIndex].PosterImage)" class="fa-times-rectangle img-thumbnail " alt="movie-poster">
                            <h4 class="mt-3 font-17"><a href="@Url.Action("MovieTemplatePage", "InformationSynchronization", new { id = Model.ListFilm[index + currIndex].Id })" class="text-dark">@Model.ListFilm[index + currIndex].Title</a></h4>

                            <p class="text-muted">Production Year: @Model.ListFilm[index + currIndex].ProductionYear.ToString("dd/MM/yyyy")</p>
                            <p class="text-muted">Grade: @Model.ListFilm[index + currIndex].MovieNightGrade</p>
                            @foreach (var gen in Model.ListFilm[index + currIndex].Genre)
                            {
                            <span class="text-bg-dark mb-1 font-12 ml-2">@gen</span>
                            }
                            <br>

                            @if(System.Web.HttpContext.Current.GetBookmarkTimeOf()!=null){ if (!Model.ListFilm[index + currIndex].Bookmark)
                            {
                            <button type="button" class="btn btn-primary btn-sm waves-effect waves-light" onclick="toggleBookmark('@Model.ListFilm[index + currIndex].Id', true)">
                                <i class="mdi mdi-bookmark-plus mr-1"></i> Bookmark
                            </button>
                            }
                            else
                            {
                            <button type="button" class="btn btn-danger btn-sm waves-effect waves-light" onclick="toggleBookmark('@Model.ListFilm[index + currIndex].Id', false)">
                                <i class="mdi mdi-bookmark-plus mr-1"></i> Delete Bookmark
                            </button>
                            }
                            if (!Model.ListFilm[currIndex+index].BookmarkTomeOf)
                            {
                            <button type="button" class="btn btn-primary btn-sm waves-effect waves-light" onclick="toggleBookmarkTimeOf('@Model.ListFilm[index + currIndex].Id', true)">
                                <i class="mdi mdi-bookmark-plus mr-1"></i> Maybe I’ll watch!
                            </button>
                            }
                            else
                            {
                            <button type="button" class="btn btn-danger btn-sm waves-effect waves-light" onclick="toggleBookmarkTimeOf('@Model.ListFilm[index + currIndex].Id', false)">
                                <i class=" remixicon-bookmark-3-line"></i> Cancel
                            </button>
                            }}
                            <a hhref="@Url.Action("MoviePlayer","InformationSynchronization", new { movieId = Model.ListFilm[index+currIndex].Id })" class="btn btn-light btn-sm waves-effect"><i class="mdi mdi-movie mr-1"></i> Watch</a>
                            @if(System.Web.HttpContext.Current.GetMySessionObject()!=null &&
                            (HttpContext.Current.GetMySessionObject().Role == LevelOfAccess.Admin
                            || HttpContext.Current.GetMySessionObject().Role == LevelOfAccess.Moderator) ){  <a href="@Url.Action("MovieTemplateModify","InformationSynchronization", new { id = Model.ListFilm[index+currIndex].Id})" ><button  type="button" class="btn btn-warning btn-sm waves-effect waves-light">
                                    <i class="mdi mdi-pencil mr-1"></i> Edit
                                </button></a>}
                            </div> <!-- end .padding -->
                    </div> <!-- end card-box-->

                </div>
                }


                }


            </div>

            }

            <div class="row">
                <div class="col-12">
                    <div class="text-right">
                        <ul class="pagination pagination-rounded justify-content-end">
                            <li class="page-item">
                                <a id="prevPage" class="page-link" href="#" onclick="leftStepPage()">&laquo;</a>
                            </li>

                            @if (Model.CommandSort.PageNom <= 3)
                            {
                            for (var i = 1; i <= 5 && i<Model.CommandSort.MaxPage; i++)

                            {
                            if (i < 5)
                            {
                            <li class="page-item @(Model.CommandSort.PageNom == i ? "active" : "")">
                                <a id="pageNumber" class="page-link" href="#" onclick="setNewPage(@i)">@i</a>
                            </li>
                            }
                            else
                            {
                            <li class="page-item)">
                                <p>...</p>
                            </li>
                            <li class="page-item @(Model.CommandSort.PageNom == i ? "active" : "")">
                                <a id="pageNumber" class="page-link" href="#" onclick="setNewPage(@Model.CommandSort.MaxPage)">@Model.CommandSort.MaxPage</a>
                            </li>
                            }
                            }
                            }
                            else
                            {
                            <li class="page-item @(Model.CommandSort.PageNom == 1 ? "active" : "")">
                                <a id="pageNumber" class="page-link" href="#" onclick="setNewPage(1)">1</a>

                            </li>
                            <li class="page-item)">
                                <p>...</p>
                            </li>
                            for (var i = Model.CommandSort.PageNom - 1; i <= Model.CommandSort.PageNom + 1 && i<Model.CommandSort.MaxPage; i++)
                            {
                            <li class="page-item @(Model.CommandSort.PageNom == i ? "active" : "")">
                                <a id="pageNumber" class="page-link" href="#" onclick="setNewPage(@i)">@i</a>
                            </li>

                            }

                            if (Model.CommandSort.MaxPage - Model.CommandSort.PageNom > 2)
                            {
                            <li class="page-item)">
                                <p>...</p>
                            </li>
                            }

                            <li class="page-item @(Model.CommandSort.PageNom == Model.CommandSort.MaxPage ? "active" : "")">
                                <a id="pageNumber" class="page-link" href="#" onclick="setNewPage(@Model.CommandSort.MaxPage)">@Model.CommandSort.MaxPage</a>
                            </li>
                            }

                            <li class="page-item">
                                <a id="nextPage" class="page-link" href="#" onclick="rightStepPage()">&raquo;</a>
                            </li>
                        </ul>

                    </div>
                </div>
            </div>
            <!-- end row -->

            }
        </div>
        <!-- container -->

    </div> <!-- content -->


</div>

<script>

    function toggleSortDirection() {
        var sortIcon = document.getElementById("sortIcon");
        var sortDirectionField = document.getElementById("sortDirection");

        if (sortIcon.classList.contains("fa-sort")) {
            sortIcon.classList.remove("fa-sort");
            sortIcon.classList.add("fa-sort-up");
            sortDirectionField.value = "1";
        } else if (sortIcon.classList.contains("fa-sort-up")) {
            sortIcon.classList.remove("fa-sort-up");
            sortIcon.classList.add("fa-sort-down");
            sortDirectionField.value = "2";
        } else {
            sortIcon.classList.remove("fa-sort-down");
            sortIcon.classList.add("fa-sort");
            sortDirectionField.value = "0";
        }
        document.forms["sortForm"].submit();
    }

    window.onload = function() {
        var statusSelect = document.getElementById('status-select');
        statusSelect.addEventListener('change', function() {
            document.forms["sortForm"].submit();
        });
    };

    function setNewPage(pageNumber) {
        console.log("Clicked on page number:", pageNumber);

        fetch('/SearchSortAdd/SetNewPageFromNumber', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({ pageNumber: pageNumber }),
        })
            .then(response => response.json())
            .then(data => {
                console.log("Response:", data);
                location.reload();
            })
            .catch(error => {
                console.error('Error:', error);
            });
    }
    function refreshPage() {
        location.reload();
    }

    function sendPostRequest(url, data) {
        fetch(url, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(data)
        })
            .then(response => response.json())
            .then(data => {
                console.log("Response:", data);
                refreshPage();
            })
            .catch(error => {
                console.error('Error:', error);
            });
    }

    function leftStepPage() {
        sendPostRequest('/SearchSortAdd/LeftStepPage', null);
    }


    function rightStepPage() {
        sendPostRequest('/SearchSortAdd/RightStepPage', null);
    }

    function toggleBookmark(movieId, isAddBookmark) {
        var url = isAddBookmark ? '/InformationSynchronization/BookmarkMovie' : '/InformationSynchronization/DeleteBookmarkMovie';
        var button = event.target;

        fetch(url, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({ movieId: movieId }),
        })
            .then(response => response.json())
            .then(data => {

                location.reload();
            })
            .catch(error => {
                console.error('Error:', error);
            });
    }
    function toggleBookmarkTimeOf(movieId, isAddBookmark) {
        var url = isAddBookmark ? '/InformationSynchronization/AddToBookmarkTimeOf' : '/InformationSynchronization/DeleteBookmarkTimeOf';
        var button = event.target;

        fetch(url, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({ movieId: movieId }),
        })
            .then(response => response.json())
            .then(data => {

                location.reload();
            })
            .catch(error => {
                console.error('Error:', error);
            });
    }


</script>

